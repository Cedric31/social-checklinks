/*=========================================================================

    Copyright Â© 2013 BIREME/PAHO/WHO

    This file is part of Social Check Links.

    Social Check Links is free software: you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, either version 2.1 of
    the License, or (at your option) any later version.

    Social Check Links is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with Social Check Links. If not, see
    <http://www.gnu.org/licenses/>.

=========================================================================*/

package br.bireme.scl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Heitor Barbieri
 * date 20130715
 */
public class CheckUrl {
    private static final String HTTP_REG_EXP = "HTTP/\\d\\.\\d\\s+(\\d+)";

    private static final int CONNECT_TIMEOUT = 5000; //60000; // connect timeout (miliseconds)
    private static final int SO_TIMEOUT = 20000; //5000; //60000; // read timeout (miliseconds)
    private static final int SO_LINGER = 10; // close timeout (seconds)

    public static final int UNKNOWN = 1000;
    public static final int IO_EXCEPTION = 1001;

    private static final Pattern pat = Pattern.compile(HTTP_REG_EXP);

    public static int check(final String urlStr) {
        if (urlStr == null) {
            throw new NullPointerException("urlStr");
        }
        return check(urlStr, 0);
    }

    public static int check(final String urlStr,
                            final int times) {
        if (urlStr == null) {
            throw new NullPointerException("urlStr");
        }
        if (times < 0) {
            throw new IllegalArgumentException("times[" + times + "] < 0");
        }
        if (times > 2) {
            return 301;  // MOVED_PERMANENTLY
        }

        final URL url;
        final int port;

        Socket socket = null;
        PrintWriter out = null;
        BufferedReader inReader = null;
        int respCode; 

        try {
            url = new URL(urlStr);
            final String host = url.getHost();
            if (host.isEmpty()) {
                throw new IOException("empty host");
            }
            final String path = url.getPath();
            final String query = url.getQuery();
            //final String mess = "HEAD " + (path.isEmpty() ? "/" : path) // Algumas urls retornam code 500 com HEAD
            final String mess = "GET " + (path.isEmpty() ? "/" : path)        
              + ((query == null) ? "" : ("?" + query))
              + " HTTP/1.1\r\n"
              //+ "User-Agent: CERN-LineMode/2.15 libwww/2.17b3\r\n"
              + "User-Agent: \"Mozilla/4.0\"\r\n"      
              //+ "User-Agent: curl/7.37.1\r\n"
              //+ "User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.0\r\n"
              + "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"      
              //+ "Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3\r\n"
              //+ "Accept-Encoding: gzip, deflate\r\n"      
              + "Host: " + host + "\r\n"
              + "Connection: close\r\n\r\n";

//System.out.println("Mess=[" + mess + "]");
            port = url.getPort() == -1 ? 80 : url.getPort();
            socket = new Socket();
            socket.setKeepAlive(false);
            socket.setSoTimeout(SO_TIMEOUT);
            //socket.setSoLinger(true, SO_LINGER);
            //socket. setReuseAddress(true);

            final InetSocketAddress isa = new InetSocketAddress(host, port);
            socket.connect(isa, CONNECT_TIMEOUT);
            out = new PrintWriter(socket.getOutputStream(), true);
            inReader = new BufferedReader(new InputStreamReader(
                                                    socket.getInputStream()));
            out.println(mess);
            final String line = inReader.readLine();
            if (line == null) {
                respCode = IO_EXCEPTION;
            } else {
                respCode = getRespCode(line);
                if ((respCode == 301) || (respCode == 302)
                                      || (respCode == 307)) {
                    respCode = movedUrl(urlStr, inReader, respCode, times);
                }
                /*else if (respCode > 0) {
                    System.out.println(line);
                    while(true) {
                        final String line2 = inReader.readLine();
                        if (line2 == null) {
                            break;
                        }
                        System.out.println(line2);
                    }
                }*/
            }
        } catch (Exception ex) {
//ex.printStackTrace();
            respCode = IO_EXCEPTION;
        } finally {
            try {
                if (inReader != null) {
                    inReader.close();
                }
                if (out != null) {
                    out.close();
                }
                if ((socket != null) && (!socket.isClosed())) {
                    socket.close();
                }
            } catch (IOException ioe) {
//ioe.printStackTrace();
                respCode = IO_EXCEPTION;
            }
        }
//if (times >= 0) {
//   System.out.println("times=" + times + " url=[" + urlStr + "] retCode=" + respCode + "  isBroken=" + isBroken(respCode));
//}
        return respCode;
    }

    public static boolean isBroken(final int code) {
        if (code < 0) {
            throw new IllegalArgumentException("code[" + code + "] < 0");
        }
        boolean ret = true;

        if ((code == 200) || (code == 401) ||
            (code == 402) || (code == 407)) {
            ret = false;
        }

        return ret;
    }

    private static int getRespCode(final String response) {
        assert response != null;

        final Matcher mat = pat.matcher(response.trim());

        return mat.find() ? Integer.parseInt(mat.group(1)) : UNKNOWN;
    }

    private static int movedUrl(final String urlStr,
                                final BufferedReader inReader,
                                final int checkCode,
                                final int times) throws IOException {
        assert urlStr != null;
        assert inReader != null;
        assert checkCode >= 300;
        assert times >= 0;

        int ret = IO_EXCEPTION;
        final URL url = new URL(urlStr);
        final String oldHost = url.getHost();
        final String oldProtocol = url.getProtocol();

        while (true) {
            String line = inReader.readLine();
            if (line == null) {
                break;
            }
            line = line.trim();
            if (line.startsWith("Location:")) {
                String newUrl = line.substring(9).trim();
                if (!shouldFollow(urlStr, newUrl)) {
                    ret = checkCode;
                    break;
                } else if (newUrl.startsWith("www")) {
                    // do nothing
                } else if (newUrl.startsWith("http")) {
                    if (newUrl.contains("://localhost")) {
                        final int idx = newUrl.indexOf('/', 15);
                        final int port = url.getPort();
                        final StringBuilder builder = new StringBuilder();

                        builder.append(url.getProtocol());
                        builder.append("://");
                        builder.append(oldHost);
                        if (port != -1) {
                            builder.append(":");
                            builder.append(port);
                        }
                        builder.append(newUrl.substring(idx));
                        newUrl = builder.toString();
                    }
                } else if (newUrl.charAt(0) == '/') {
                    newUrl = oldProtocol + "://" + oldHost + newUrl;
                } else if (newUrl.startsWith("./")) {
                    newUrl = oldProtocol + "://" +oldHost + newUrl.substring(1);
                } else {
                    newUrl = oldProtocol + "://" + oldHost + "/" + newUrl;
                }
                ret = check(newUrl, times + 1);
                break;
            }
        }

        return ret;
    }

    private static boolean shouldFollow (final String oldUrl,
                                         final String newUrl) {
        assert oldUrl != null;
        assert newUrl != null;

        final String old1 = oldUrl.startsWith("http://")
                                                 ? oldUrl.substring(7) : oldUrl;
        final String old2 = old1.endsWith("/")
                                  ? old1.substring(0, old1.length() - 1) : old1;
        final String new1 = newUrl.startsWith("http://")
                                                 ? newUrl.substring(7) : newUrl;
        final String new2 = new1.endsWith("/")
                                  ? new1.substring(0, new1.length() - 1) : new1;

        final String[] splitOld = old2.split("/");
        final String[] splitNew = new2.split("/");
        boolean ret;

        if (splitOld.length == 1) {
            ret = true;
        } else if (splitNew.length == 1) {
            ret = false;
        } else if (splitOld[splitOld.length - 1]
                                      .equals(splitNew[splitNew.length - 1])) {
            ret = true;
        } else {
            ret = false;
        }

        return ret;
    }

    private static void usage() {
        System.err.println("usage: CheckUrl <url>");
        System.exit(-1);
    }

    public static void main(final String[] args) {
        final String url =  "http://citrus.uspnet.usp.br/eef/uploads/arquivo/v17 n1 artigo1.pdf";     // 404 error code
        final String url2 = "http://citrus.uspnet.usp.br/eef/uploads/arquivo/v17%20n1%20artigo1.pdf"; // 200 error code 

        if (args.length != 1) {
             usage();
        }

        System.out.println();
        System.out.print("URL=[" + args[0] + "] ");
        System.out.println("ErrCode=" + CheckUrl.check(args[0]));
    }
}
