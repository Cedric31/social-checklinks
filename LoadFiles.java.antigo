package br.bireme.scl;

import bruma.BrumaException;
import bruma.master.Master;
import bruma.master.MasterFactory;
import bruma.master.Record;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Heitor Barbieri
 * date 20130715
 */
public class LoadFiles1 {
    class Node {        
        String path;
        String path_slice;
        Map<String,Node> sons;
        boolean is_ok;
        int total;
        
        Node() {
            path = null;
            path_slice = null;
            sons = null;
            is_ok = false;
            total = 0;
        }
    }
    class Leaf extends Node {
        String id;
        String centerId;
        String msg;
        
        Leaf(final String id,
             final String centerId,   
             final String msg) {
            assert id != null;
            assert centerId != null;
            assert msg != null;
            
            this.id = id;
            this.centerId = centerId;
            this.msg = msg;
            this.total = 1;
        }
    }
    
    public Node importFromFile(final String filePath,
                               final String mstName) throws IOException, 
                                                            BrumaException {
        if (filePath == null) {
            throw new NullPointerException("filePath");
        }
        if (mstName == null) {
            throw new NullPointerException("mst");
        }        
        final Node root = new Node();        
        final BufferedReader reader = new BufferedReader(new FileReader(filePath));
        final Master mst = MasterFactory.getInstance(mstName).open();
        
        while (true) {
            final String line = reader.readLine();
            if (line == null) {
                break;
            }
            final String line2 = line.trim();
            if (!line2.isEmpty()) {
                final String[] split = line2.split("\\|", 3);
                final Record rec = mst.getRecord(Integer.parseInt(split[0]));
                
                if (!rec.isActive()) {
                    throw new IOException("rec id=" + split[0] 
                                                            + " is not active");
                }
                final int centerTag = 1;
                final String centerId = rec.getField(centerTag, 1).getContent();
System.out.println(line2);
                insertUrl(split, root, centerId);
            }
        }
        reader.close();
        
        return root;
    }
    
    private void insertUrl(final String[] split,
                           final Node root,
                           final String centerId) {
        assert split != null;        
        assert root != null;
        assert centerId != null;
        
        final String id = split[0];
        final String[] split2 = split[1].split("/+");
        final StringBuilder builder = new StringBuilder();
        
        boolean first = true;
        Node father = root;
        
        for (String elem : split2) {
            if (father.sons == null) {
                father.sons = new HashMap<>();            
            }
            if (first) {
                first = false;
            } else {
                builder.append("/");
            }
            if (builder.toString().equals("http:/")) {
                builder.append("/");
            }
            builder.append(elem);
            Node son = father.sons.get(elem);
            if (son == null) {
                son = new Node();                
                son.path_slice = elem;
                son.path = builder.toString();
                father.sons.put(elem, son);
            }
            son.total++;
            father = son;
        }
        final Leaf idNode = new Leaf(id, centerId, split[2]);
        idNode.path_slice = father.path_slice;
        idNode.path = father.path;
        if (father.sons == null) {
            father.sons = new HashMap<>();            
        }
        father.sons.put("id_" + id, idNode);
    }
    
    public boolean checkUrl(final String url) {
        if (url == null) {
            throw new NullPointerException("url");
        }
        return CheckUrl.isBroken(CheckUrl.check(url));
    }
    
    public void checkTree(final Node node) {
        checkTree(node, false);
    }
    
    private void checkTree(final Node node,
                           final boolean forceBroken) {
        if (node == null) {
            throw new NullPointerException("root");
        }
        
        final Collection<Node> children = (node.sons == null) ? null 
                                                           : node.sons.values();
        boolean broken = forceBroken;
                
        if (broken) {
            node.is_ok = false;
        } else {
            if ((node.path == null) || (node instanceof Leaf)) {
                node.is_ok = true;
            } else {
                if (node.path.equals("http:")) {
                    node.is_ok = true;
                } else {
                    if (checkUrl(node.path)) {
                        node.is_ok = false;
                        broken = true;                        
                    } else {
                        node.is_ok = true;
                    }
                }
            }
        }
        if (children != null) {
            for (Node child: children) {
                checkTree(child, broken);
            }
        }
    }
        
    public Set<String> getCenterIds(final Node root) {
        if (root == null) {
            throw new NullPointerException("root");
        }
        final Set<String> set = new HashSet<>();
        
        getCenterIds(root, set);
        
        return set;
    }
    
    private void getCenterIds(final Node root,
                              Set<String> ids) {
        assert root != null;
        assert ids != null;
        
        if (root instanceof Leaf) {
            final Leaf leaf = (Leaf)root;
            ids.add(leaf.centerId);
        } else {
            final Collection<Node> sons = (root.sons == null) ? null
                                                          : root.sons.values();
            if (sons != null) {
                for (Node node : sons) {
                    getCenterIds(node, ids);
                }                    
            }
        }
    }
    
    public Map<Node,List<Leaf>> getSimplifiedBadUrl(final Node root,
                                                    final String centerId) {
        if (root == null) {
            throw new NullPointerException("root");
        }
        if (centerId == null) {
            throw new NullPointerException("centerId");
        }
        final Map<Node,List<Leaf>> map = new HashMap<>();
        
        getSimplifiedBadUrl(root, centerId, map);
        
        return map;
    }
    
    private void getSimplifiedBadUrl(final Node root,
                                     final String centerId,
                                     final Map<Node,List<Leaf>> map) {
        assert root != null;
        assert centerId != null;
        assert map != null;
        
        if (root.is_ok) {
            final Collection<Node> sons = (root.sons == null) ? null
                                                          : root.sons.values();
            if (sons != null) {
                for (Node node : sons) {
                    getSimplifiedBadUrl(node, centerId, map);
                }                    
            }
        } else {
            List<Leaf> leafs = map.get(root);
            if (leafs == null) {
                leafs = new ArrayList<>();
                map.put(root, leafs);
            }
            getLeafs(root, centerId, leafs);
        }
    }
    
    private void getLeafs(final Node root,
                          final String centerId,
                          final List<Leaf> leafs) {
        assert root != null;
        assert centerId != null;
        assert leafs != null;
        
        if (root instanceof Leaf) {
            final Leaf leaf = (Leaf)root;
            if (leaf.centerId.equals(centerId)) {
                leafs.add(leaf);
            }
        } else {
            final Collection<Node> sons = (root.sons == null) ? null
                                                          : root.sons.values();
            if (sons != null) {
                for (Node node : sons) {
                    getLeafs(node, centerId, leafs);
                }
            }                    
        }
    }
    
    public void getSimplifiedBadUrl(final Node root,
                                    final List<String> bads) {
        if (root == null) {
            throw new NullPointerException("root");
        }
        if (bads == null) {
            throw new NullPointerException("bads");
        }
        if (root.is_ok) {
            final Collection<Node> sons = (root.sons == null) ? null
                                                          : root.sons.values();
            if (sons != null) {
                for (Node node : sons) {
                    getSimplifiedBadUrl(node, bads);
                }                    
            }
        } else {
            if (!(root instanceof Leaf)) {
                bads.add(root.path);
            }
        }
    }
    
    public String getTree(final Node root) {
        if (root == null) {
            throw new NullPointerException("root");
        }
        final StringBuilder builder = new StringBuilder();
        
        getNode(root, "", builder);
        
        return builder.toString();
    }
        
    private void getNode(final Node node,
                         final String whites,
                         final StringBuilder builder) {
        assert node != null;
        assert whites != null;
        assert builder != null;        
        
        final String nWhites = "  " + whites;
        final Collection<Node> sons = (node.sons == null) ? null
                                                          : node.sons.values();
        
        if (node instanceof Leaf) {
            final Leaf leaf = (Leaf)node;
            builder.append(nWhites);
            builder.append("id=");
            builder.append(leaf.id);
            builder.append("\n");
            builder.append(nWhites);
            builder.append("msg=");
            builder.append(leaf.msg);
            builder.append("\n");
        }
        builder.append(nWhites);
        builder.append("path_slice=");
        builder.append(node.path_slice);
        builder.append("\n");
        builder.append(nWhites);
        builder.append("path=");
        builder.append(node.path);
        builder.append("\n");
        builder.append(nWhites);
        builder.append("ok=");
        builder.append(node.is_ok);
        builder.append("\n");
        if (sons != null) {
            for (Node snode : sons) {
                getNode(snode, nWhites, builder);
            }
        }
        //builder.append("\n");
    }
    
    private static void usage() {
        System.err.println("usage: LoadFiles <path>");
        System.exit(1);
    }
    
    public static void main(final String args[]) throws IOException {
        if (args.length != 1) {
            usage();
        }
        final LoadFiles1 load = new LoadFiles1();
System.out.println("Start loading urls");
        final Node root = load.importFromFile(args[0]);
System.out.println("Finish loading urls");     
        load.checkTree(root, false);
System.out.println("Finish checking urls");        
        //System.out.println(load.getTree(root));
        final ArrayList<String> bads = new ArrayList<>();
        load.getSimplifiedBadUrl(root, bads);
        
        for (String bad : bads) {
            System.out.println("* => " + bad);
        }
    }
}
